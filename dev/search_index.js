var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OrUnions","category":"page"},{"location":"#OrUnions","page":"Home","title":"OrUnions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OrUnions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OrUnions]","category":"page"},{"location":"#OrUnions.:|","page":"Home","title":"OrUnions.:|","text":"OrUnion.:|(t::Union{Type,TypeVar}, types::Union{Type,TypeVar}...)\na::Union{Type,TypeVar} | b::Union{Type,TypeVar}\n\nLogical \"or\" applied to types to form a Union and forwards to Base.:| which implements bitwise \"or\" for numerical types.\n\nFor Type or TypeVar, the following is true.\n\n`|(t1, t2, ...) === Union{t1, t2, ...}\na | b === Union{a,b}\n\nFor all combinations of types, the implementation fallsback to Base.:| via forwarding.\n\n|(a, b, ...) === Base.:|(a, b, ...)\na | b === Base.:|(a, b)\n\n\n\n\n\n","category":"function"},{"location":"#OrUnions.:∨","page":"Home","title":"OrUnions.:∨","text":"∨(t::Union{Type,TypeVar}, types::Union{Type,TypeVar}...)\na::Union{Type,TypeVar} ∨ b::Union{Type,TypeVar}\n\nLogical \"or\" applied to types to form a Union. ∨ is exported from OrUnions.\n\n`∨(t1, t2, ...) === Union{t1, t2, ...}\na ∨ b === Union{a,b}\n\n\n\n\n\n","category":"function"},{"location":"#OrUnions.@orunion-Tuple{Any}","page":"Home","title":"OrUnions.@orunion","text":"@orunion\n@∨\nOrUnions.@|\n\nMacro that inverts the order of precedence between :: and the logical \"or\" operators, | and ∨.\n\n@orunion x::T1 | T2 is turned into x::Union{T2, T1}\n@orunion x::T1 | T2 | T3 is turned into x::Union{T3, T2, T1}\n@orunion x::T1 | T2 | T3 | ... | TN is turned into x::Union{TN, ..., T3, T2, T1})\n@orunion function f(x::T1 | T2) is turned into function f(x::Union{T2, T1})\n@orunion function f(x::T1 | T2 | T3) is turned into function f(x::Union{T3, T2, T1})\n@orunion f(x::T1 | T2) = nothing is turned into f(x::Union{T2,T1}) = nothing\n@orunion (x::T1 | T2) -> nothing is turned into x::Union{T2, T1} -> nothing\n\n\n\n\n\n","category":"macro"}]
}
